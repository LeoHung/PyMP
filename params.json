{"name":"Pymp","tagline":"","body":"# PyMP: Multiprocessing Python module for lazy programmers\r\n\r\nSan-Chuan Hung (sanchuah at andrew.cmu.edu)\r\nJiajun Wang (jiajunwa at andrew.cmu.edu)\r\n\r\n## SUMMARY\r\nWe are going to implement a Python module for helping programmers to parallelize their code by comments, like “#pragma omp parallel for” tag  in OpenMP.\r\n\r\nOur target is making the module based on pure Python, so users will not need to acquire other frameworks except installing our module.\r\n\r\n## BACKGROUND\r\nOne of  promising features of OpenMP is the easiness to make . All it needs is annotations to tag the block to be in parallel. Due to Global Interpreter Lock mechanism in Python, to our best knowledge, there is no naive way which enables standard Python to integrate with OpenMP. The programmers need to learn Cython language or new parallel Python frameworks, which spends much extra effort. \r\n\r\nWe plan to design a python-to-python compiler which translates original python code to a parallelized code: from tagged for loop code to multi-process code (like Pool().map()). With our “compiler”, the users can make their code into parallelized code easily by adding just annotations near the for loop. \r\n\r\nWe think that the programs with cpu intensive jobs on multiple data can benefit from PyMP. Because we plan to uses multi-process to run a for loop in parallel, in which multi-process can generate overhead(e.g. scattering variables, gathering return values). If the computation is light in each iteration, PyMP may spend most of time to make it run in multi-process and cannot get beneficial from parallel running. On the other side, the cpu intensive jobs can get beneficial from multi-process in parallel, like Mandelbort.\r\n\r\n## THE CHALLENGE\r\n“Compile” code blocks with annotation into parallel code. Currently we plan to apply a 3-steps methodology. First, functions in our module check for any recognizable annotations and re-write corresponding blocks into parallel functions. Second, link this parallel functions back into the original code to replace the old blocks and add any necessary control checks. Third, do normal compile or directly execute the modified Python code.\r\nImplement basic scheduling mechanism. We should at least support reasonable static scheduler. If possible, we would like to try to support dynamical scheduler as well.\r\n\r\n## RESOURCES\r\nOne server in GHC with 8-16 cores would be enough for our project.\r\n\r\nWe have implemented MPI-version kmeans in Python in last semester 15649 course. Maybe we can use it to do some experiments for comparison.\r\n\r\n## GOALS AND DELIVERABLES\r\n- We will develop a “compiler” which can translate a Python code in parallel\r\n- We will compare the speedup curve between our auto-generated code and sophisticated hand crafted code in several applications\r\n- We hope to develop some sophisticated parallel options for users to specify (e.g. dynamic scheduling)\r\n- We hope to compare the speedup curve between our our auto-generated code and c openmp code in several applications\r\n\r\n## PLATFORM CHOICE\r\nPython, because it is a widely used programming language. \r\n\r\n## SCHEDULE\r\n- Thu April 3th to 10th\r\n  - Finish “compiler”. Be able to transform annotated code into parallel functions. \r\n  - In this phase, we support “for” loop annotation only.\r\n- Thu April 11th to 16th (Checkpoint)\r\n  - Finish static scheduler. Test on several workload.\r\n- Thu April 17th to 24th\r\n  - Refine code.\r\n  - Finalize list of supported annotation.\r\n  - Support all annotations in our design.\r\n- Thu April 25th to 30th\r\n  - Bug fixing.\r\n  - Try to implement dynamical scheduler.\r\n- Fri May 1th to 8th\r\n  - Continue bug fixing.\r\n  - Refine compiler to check any logic confliction that may block parallel and warn users.\r\n  - Test on more program. Finish document.\r\n  - Project pages are made available to judges for finalist selection.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}